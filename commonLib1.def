declare Function APICreateDirectory(ByVal szPath As String) As Logical							
Declare Function CreateDirectory Lib "kernel32" Alias "CreateDirectoryA"(ByVal lpPathName As String, ByVal lpSecurityAttributes As Integer) As Integer							
declare function DiarieUtanBokstäver(ByVal diarienummer as string) as string							
declare function FindCharTurncStringByPos(byVal toRemove as string,byVal inputString as string) as string							
declare function FirstLeftMostNumber(byVal inputString as string) as integer							
declare function getFnr(ByVal fastighetsNamn as string) as integer							
declare function IFSAMEoneDIFFRENTzeroONEBLANKhalf(byVal valX as string,byVal valY as string) as float							
declare function isPathOpen(byVal Tpath as string) as logical							
declare function mixedDateToUnion(byVal datumString as string) as string							
Declare Function ReturnTrue() as Logical							
declare Function SearchReplace(ByVal strInput as String, ByVal strReplace as String, ByVal strReplacement as String) as String							
declare function SqlGenWhereColIsNotAny(byVal kolName, toFilterBy() as string) as string							
declare function sqlPart_ColNrs(byVal nr as integer) as string							
Declare Function StringContains(ByVal strInput as String, ByVal charToFind as String) as Logical							
declare Function tidsdialog(i as integer, y as integer,total as integer) as integer							
declare function ValidateNClosePath(byVal filePath as string) as logical							
declare function XOR(byVal a as logical, byVal b as logical) as logical							
declare sub cleanUpFormerSession							
declare sub commitAndAdindexColumn(tempAlias as alias)							
declare sub increment(iProgress as integer,iProgressRange as integer,starttime as integer)							
declare sub presentRessults()							
declare sub runInvertCommit(byval query as string, byVal commitPath as string)							
declare sub SilenttidsSummering(iProgress as integer,iProgressRange as integer,starttime as integer)							
declare sub tidsSummering(iProgress as integer,iProgressRange as integer,starttime as integer)							
declare sub TimePresent(start as integer,endTime as integer,OptionalNumberOf as integer)							
							
Declare Function SplitStringAtCharacter	(ByVal sInput As String 'String to be split into substrings	
										, ByVal sSplitChar As String 'Character used as delimiter (e.g. ",", ";")	
										, sPartsArray() As String 'String array to be populated with the substrings	
										) As Integer 'Number of substrings found in sInput
										
declare function findInINTArray(byVal värde as integer, array() as integer) as logical							
declare function findInStringArray(byVal värde as string, array() as string) as logical							
declare function generateInsertStringWithArray(insertinto as string,värde() as string) as string							
declare sub _tidssummering(iProgress as integer,starttime as integer,ressultArray() as string)							
declare sub addIntToArrayAsifSet(inputArray() as integer, addValue as integer)							
declare sub addStringToArrayAsifSet(inputArray() as string,byVal addValue as string)							
declare sub commonSubsetOfTwoStrArrays(array1() as string,array2() as string,ressultArray() as string)							
declare sub JoinTwoArraysOfIntsIntoThrid(inArray1() as integer,inArray2() as integer,outArray() as integer)							
declare sub printEveryString(StringArray() as String)							
declare sub removeAtIndex(InputArray() as string,byval removeIndex as integer, outputArray() as string)							
declare sub removeFromIntArray(array() as integer,värde as integer)							
declare sub removeFromStringArray(array() as String,värde as String)							
							
declare Function arrayAsStringIgnoreEmpty(tableX() as string) as string							
declare Function CheckTable (table_name As String) As Logical							
declare function columnAtindexAsString(tableName as string,columnName as string, indexNr as integer) as string							
declare Function CommitEveryTable() as logical							
declare Function compareTwoTablesColumns(table1s as string, table2s as string,columnNamesX() as string, columnNamesY() as string) as integer							
declare Function CountRows(ByVal tableName as String) as integer							
declare function createTemporaryTableAndOpen(byVal nameAndStructure as string) as string							
declare Function doesnTableExist (table_name As String) As Logical							
declare Function generateMergestring (värde() as string,påPlatts() as string,byVal insertinto as string,byVal fromTable as string) as string							
declare Function getColumnsOfTable_asString(ByVal tableName as string) as string							
declare function getPathFromPathTable(byVal tableName as string) as string							
declare function görTillBasTabellReturneraPath(byval tableName as string) as string							
declare function ifOpenFetchFirstCol11Asinteger(byVal tableName as string) as integer							
declare function intArrayAsPrintString(tableX() as integer) as string							
Declare function IsTableOpen(table_name as String) as Logical							
declare function openTableAndConfirm(byval toOpen as string) as logical							
declare Function RowColumnAsString(ByVal tableName as String, ByVal columnName as String) as String							
declare function SingletableOpenerConfirmation(byval toOpen as string) as logical							
declare function StringArrayAsString(tableX() as string) as string							
declare Function tableDoesntIncludeColumns(byval tableName as string,TestColumns() as string) as logical							
declare Function TableIsNotOpen (table_name As String) As Logical							
declare function tableNameByPath(byVal Tpath as string) as string							
							
declare sub columnAsStringArray(byVal tableName as string,byVal columnName as string, Array() as string)							
declare sub combineTwoSelections(motherTable as alias,byVal tableName1 as string, byVal tableName2 as string, byVal outPutTable as string)							
declare Sub getColumnsOfTable_intoArray(ByVal tableName as string,columnNames() as string)							
declare sub GetOpentables(TableArray() as String)							
declare sub getRowAtIndexAsArray(tableOfChoiseKir as alias,byval indexNr as integer,tableColumns() as string)							
declare sub görTillBasTabell(byval tableName as string)							
declare sub insertCommonColumnsFromTableXintoY(ByVal tableToInsert as string,byVal insertWhere as string)							
declare sub insertXintoYtable(ByVal tableToInsert as string,byVal insertWhere as string)							
declare sub insertXintoYtableWhereXcolLessThaYcol(ByVal tableToInsert as string,byVal insertWhere as string)							
declare sub mergeTables(värde() as string,påPlatts() as string,byVal insertinto as string,byVal fromTable as string,condition as string,byval ressultName as string,composite as logical,byVal compositeString as string)							
declare sub openAndRemoveDupes(tablePath as string,byVal tableName as string, byval groupbyColumnsSeparatedWithComma as string)							
declare sub openSingleTable(byVal x as string)							
declare sub opentable(TableArray() as String)							
declare sub removeIndex(tableName as alias)							
declare sub removeIndexfromtables(tableNames() as string)							
declare sub rowIdsFromSelection(rowIds() as integer,byVal tableName as string)							
declare sub rowIndexFromSelection(rowindex() as integer,byVal tableName as string)							
declare sub selectFromTableByArrayOfRowids(byVal tableName as string,rowids() as integer,byVal selectionName as string)							
declare sub sqlPopulateTableWithTable(värde() as string,påPlatts() as string,byVal insertinto as string,byVal fromTable as string)							
declare sub tableOpener(tableNames() as string)							
declare sub updateIndex(byVal tableName as string)							
							
declare sub closeAllBut(tableNames() as string)							
declare sub closeSingleTable(byVal tableName as string)							
declare sub closeTableByPath(byVal Tpath as string)							
declare sub commitCloseAndReopen(tableName as alias,pathX as string)							
declare sub tableCloser(tableNames() as string)							
declare sub tableCloserAndCommiter(tableNames() as string)							
						